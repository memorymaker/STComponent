using ST.Controls;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml.Linq;

namespace ST.DataModeler
{
    public partial class GraphicEditor
    {
        public Dictionary<string, UserEditorStyleInfo> Styles = new Dictionary<string, UserEditorStyleInfo>();

        private void LoadUserEditorStyle()
        {
        }

        #region Function innser

        #endregion

        #region Function Outer
        private Color GetLineBackColor(string lineText)
        {
            Color rs = Color.Empty;

            // LineStyles
            foreach (var pair in LineStyles)
            {
                GraphicEditorLineStyleInfo node = pair.Value;
                if (node.Lines.Contains(lineIndex))
                {
                    rs = node.LineBackColor;
                    break;
                }
            }

            // Styles
            if (rs.IsEmpty)
            {
                foreach (var pair in Styles)
                {
                    UserEditorStyleInfo info = pair.Value;
                    if (info.LineColor != Color.Empty)
                    {
                        RegexOptions regexOptionsCaseSensitive = info.CaseSensitive ? RegexOptions.None : RegexOptions.IgnoreCase;
                        RegexOptions regexOptionsCaseMultiline = info.MultiLine ? RegexOptions.Multiline : RegexOptions.None;
                        Regex regex = new Regex(info.Regex, regexOptionsCaseSensitive | regexOptionsCaseMultiline);
                        Match match = regex.Match(lineText);
                        if (match.Success)
                        {
                            rs = info.LineColor;
                        }
                    }
                }
            }

            return rs;
        }

        // 삭제 대기
        public UserEditorStyleInfo GetStyleInfo(string lineText, out int _sp, bool hasLineBackColor = false)
        {
            UserEditorStyleInfo rs = null;
            _sp = -1;

            foreach (var pair in Styles)
            {
                UserEditorStyleInfo node = pair.Value;
                if (hasLineBackColor && node.LineColor == Color.Empty)
                {
                    continue;
                }

                foreach (var word in node.Words)
                {
                    if (node.FirstWordInLine)
                    {
                        if (word.Length <= lineText.Length
                            && lineText.Substring(0, word.Length) == word)
                        {
                            _sp = 0;
                            rs = node;
                            break;
                        }
                    }
                    else
                    {
                        bool isMapped = true;
                        int sp = lineText.IndexOf(word);
                        if (0 < sp)
                        {
                            int charCode = lineText[sp - 1];
                            if (!((65 <= charCode && charCode <= 90)
                                || (97 <= charCode && charCode <= 122)
                                || (charCode <= 95)))
                            {
                                isMapped = false;
                            }
                        }

                        if (isMapped && sp + word.Length < lineText.Length)
                        {
                            int charCode = lineText[sp + word.Length];
                            if (!((48 <= charCode && charCode <= 57)
                                || (65 <= charCode && charCode <= 90)
                                || (97 <= charCode && charCode <= 122)
                                || (charCode <= 95)))
                            {
                                isMapped = false;
                            }
                        }

                        if (isMapped)
                        {
                            _sp = sp;
                            rs = node;
                            break;
                        }
                    }
                }
            }

            return rs;
        }

        public int IndexOfForStyle(UserEditorStyleInfo info, ref string lineText, string word, bool caseSensitive, out bool success, int startIndex = 0)
        {
            int rsSp = -1;
            success = false;

            if (info.FirstWordInLine && startIndex == 0)
            {
                if (word.Length <= lineText.Length
                    && lineText.Substring(0, word.Length) == word)
                {
                    success = true;
                    rsSp = 0;
                }
            }
            else
            {
                bool isMapped = true;
                rsSp = lineText.IndexOf(word, startIndex
                    , caseSensitive ? StringComparison.Ordinal : StringComparison.OrdinalIgnoreCase);
                if (0 < rsSp)
                {
                    int charCode = lineText[rsSp - 1];
                    if (((48 <= charCode && charCode <= 57)
                        || (65 <= charCode && charCode <= 90)
                        || (97 <= charCode && charCode <= 122)
                        || (charCode == 95)))
                    {
                        isMapped = false;
                    }
                }

                if (isMapped && rsSp + word.Length < lineText.Length)
                {
                    int charCode = lineText[rsSp + word.Length];
                    if (((48 <= charCode && charCode <= 57)
                        || (65 <= charCode && charCode <= 90)
                        || (97 <= charCode && charCode <= 122)
                        || (charCode == 95)))
                    {
                        isMapped = false;
                    }
                }

                if (isMapped)
                {
                    success = true;
                }
            }

            return rsSp;
        }
        #endregion
    }

    public class UserEditorStyleInfo
    {
        #region Name
        public string Name { get; set; }
        #endregion

        #region Conditions
        public string Regex { get; set; }

        public bool CaseSensitive { get; set; } = false;

        public bool MultiLine { get; set; } = false;
        #endregion

        #region System(Name: Comment)
        public string MultiLineStartingText { get; set; }

        public string MultiLineEndText { get; set; }

        public string SingleLineText { get; set; }
        #endregion

        #region Etc
        public string Text { get; set; }
        #endregion

        #region Line
        public Color LineColor { get; set; } = Color.Empty;
        #endregion

        #region Text
        public Color FontColor { get; set; } = Color.Empty;

        public Color BackColor { get; set; } = Color.Empty;

        public bool Bold { get; set; } = false;

        public bool Italic { get; set; } = false;

        public bool Underline { get; set; } = false;
        #endregion
    }
}
